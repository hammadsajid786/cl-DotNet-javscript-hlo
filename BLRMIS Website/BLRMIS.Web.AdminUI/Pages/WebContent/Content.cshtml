@page "/content"
@{
    ViewData["Title"] = "Content";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}


@*<script src="~/ckeditor/ckeditor.js"></script>*@

<script src="https://cdn.ckeditor.com/ckeditor5/12.1.0/classic/ckeditor.js"></script>

<div class="">
    <div class="table-box">
        <div class="hd-holder">
            <h6>Content Managment</h6>
            <span class="bd-line"></span>
        </div>
        <form>
            <div class="form-group">
                <span class="custom-dropdown">
                    <select data-bind="options:pageList,optionsText:'Text',optionsValue:'Value',optionsCaption: 'Select page for content management', value: selectedValue, event:{ change: onPageChanged}"
                            class="form-control"></select>
                </span>
            </div>
            @*<div id="editor" class="custom-editor mb20">
            <div id='editable'></div>
        </div>*@
            <div class="row">
                <div class="col-md-12">
                    <textarea name="contentDescription1" placeholder="Type something" data-bind="ckeditor:contentDescription" id="contentDescription1" rows="20" cols="80" class="custom-editor mb20">

                    </textarea>
                </div>
            </div>

            @*<div id="editable" contenteditable="true" data-bind="htmlValue: test" rows="10" cols="80"></div>*@


            <div class="sub-btns mt20">
                <button class="customBtn" data-bind="click: onPublish">Publish</button>

                <button data-bind="click: onPreview" class="customBtn whiteBtn">Preview</button>
                <button data-bind="click: onDiscard,enable:editable" class="customBtn greyBtn">Discard</button>
            </div>


        </form>

    </div>
</div>

@section scripts{
    <script>
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        $(document).ready(function () {

            theEditor.isReadOnly = true;
        });
        //var editor;
        //editor = ClassicEditor.create(document.querySelector('#contentDescription1'))
        //    .catch(error => {
        //        console.error(error);
        //    });
        var dSelectedValue = "";
        var theEditor;
       // ClassicEditor.create(document.querySelector('#contentDescription1')).then(editor => { theEditor = editor; });

        ClassicEditor
            .create(document.querySelector('#contentDescription1'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],
                image: {
                    // You need to configure the image toolbar, too, so it uses the new style buttons.
                    toolbar: ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],

                    styles: [
                        // This option is equal to a situation where no style is applied.
                        'full',

                        // This represents an image aligned to the left.
                        'alignLeft',

                        // This represents an image aligned to the right.
                        'alignRight'
                    ]
                }
                })
            .then(editor => { theEditor = editor; })
            .catch(error => {
              console.error(error);
            });

        //var viewModel = 

        var description;
        var viewModel = function () {
            //this.firstName = ko.observable("Hello");
            var self = {};
            self.pageList = ko.observableArray();
            self.contentDescription = ko.observable().extend({ required: true });
            self.showLoader = true;
            self.errors = ko.observable();
            self.selectedValue = ko.observable().extend({ required: true });
            self.test = ko.observable();
            $lib.showSpinner(true);
            editable = ko.observable(false);
            $lib.http.get('/content/Pages', (err, res) => {
                $lib.showSpinner(false);
                self.pageList(res);
            })

            self.onPageChanged = (obj, event) => {
                // console.log(event)
                self.contentDescription = ko.observable("");
                theEditor.setData("");
                dSelectedValue = self.selectedValue();
                if (event.originalEvent) {
                    if (self.selectedValue()!= undefined && self.selectedValue() != '') {
                        theEditor.isReadOnly = false;
                        editable(true);
                        $lib.showSpinner(true);
                        $lib.http.get('/content/' + self.selectedValue(), (err, res) => {
                            $lib.showSpinner(false);
                            if (err) return;
                            else {
                                //console.log(res);
                                if (res == null) {

                                }
                                else {
                                    description = res.ContentDescription;
                                    theEditor.setData(res.ContentDescription);
                                }
                            }
                        });
                    }
                    else {
                        theEditor.isReadOnly = true;
                        editable(false);
                    }

                } else { // program changed

                }

            }

            onPreview = function () {
                switch (dSelectedValue) {
                    case "1":
                        var newWindow = window.open('PreviewPages/Preview.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("heading").innerHTML = 'About BORB';
                            newWindow.document.getElementById("title").innerHTML = 'About BORB';
                            newWindow.document.getElementById("contentDescription").innerHTML = content;

                        });
                        break;
                    case "2":
                        var newWindow = window.open('PreviewPages/Preview.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("heading").innerHTML = 'Property Registry';
                            newWindow.document.getElementById("title").innerHTML = 'Property Registry';
                            newWindow.document.getElementById("contentDescription").innerHTML = content;
                        });
                        break;
                    case "3":
                        var newWindow = window.open('PreviewPages/Preview.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("heading").innerHTML = 'Fee Schedules';
                            newWindow.document.getElementById("title").innerHTML = 'Fee Schedules';
                            newWindow.document.getElementById("contentDescription").innerHTML = content;
                        });
                        break;
                    case "4":
                        var newWindow = window.open('PreviewPages/Contact-Us.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("contentDescription").innerHTML = content;

                        });
                        break;
                    case "5":
                        var newWindow = window.open('PreviewPages/Preview.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("heading").innerHTML = 'E-Stamping';
                            newWindow.document.getElementById("title").innerHTML = 'E-Stamping';
                            newWindow.document.getElementById("contentDescription").innerHTML = content;

                        });
                        break;
                    case "6":
                        var newWindow = window.open('PreviewPages/Preview.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("heading").innerHTML = 'Registry of Deeds';
                            newWindow.document.getElementById("title").innerHTML = 'Registry of Deeds';
                            newWindow.document.getElementById("contentDescription").innerHTML = content;

                        });
                        break;
                    case "7":
                        var newWindow = window.open('PreviewPages/Preview.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("heading").innerHTML = 'Markaz e Sahuliyat';
                            newWindow.document.getElementById("title").innerHTML = 'Markaz e Sahuliyat';
                            newWindow.document.getElementById("contentDescription").innerHTML = content;

                        });
                        break;
                    case "8":
                        var newWindow = window.open('PreviewPages/Preview.html', '_blank');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("heading").innerHTML = 'Grievance';
                            newWindow.document.getElementById("title").innerHTML = 'Grievance';
                            newWindow.document.getElementById("contentDescription").innerHTML = content;

                        });
                        break;
                    case "11":
                        var newWindow = window.open('PreviewPages/Configuration.html', '_blank');
                        //var newWindow = window.open('PreviewPages/news-detail.html','newwindow','width=300,height=250');
                        var content = theEditor.getData();
                        $(newWindow).on('load', function () {
                            newWindow.document.getElementById("contentDescription").innerHTML = content;

                        });
                    default:

                }


            }

            onPublish = function ()
            {    
                var WebContentModel = {
                    ContentPageId: dSelectedValue,
                    ContentDescription: theEditor.getData(),
                };
                var submitData = ko.toJSON(WebContentModel);

                if (WebContentModel.ContentPageId != "" && WebContentModel.ContentDescription != "") {
                    // var baseUri = 'http://localhost/BLRMISPublished/api/content';

                    //console.log(theEditor.getData());

                    $lib.http.post('/content', WebContentModel, (err, res) => {
                        if (err) return;
                        else {
                            description = WebContentModel.ContentDescription;
                            $toastMessages.showSuccess('Page is edited successfully');
                        }
                    });

                }
                else {
                    $toastMessages.showError('Please Enter All the Values.');
                    }
            }

            onDiscard = function () {
               // if (self.selectedValue != undefined && self.selectedValue != '') {
                    var title = "Discard Confirmation"
                    var message = "Are you sure you want to discard changes? This action cannot be undone.";
                    $util.confirmBox(title, message, (confirm) => {
                        if (confirm) {

                            theEditor.setData(description);
                        }
                    })

                }
        //    }
                return self;
        }
        //viewModel.errors = ko.validation.group(viewModel);
        $lib.bindUI(viewModel);
        $lib.setPageTitle("Content Management");
    </script>
}
