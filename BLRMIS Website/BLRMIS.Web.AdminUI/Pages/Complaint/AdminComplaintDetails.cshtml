@page "/AdminComplaint/{id?}"
@{
    ViewData["Title"] = "ComplaintDetails";
}
<div class="complaint-holder" style="display:none" data-bind="if:pageLoaded, visible:pageLoaded">
    <div class="table-box">
        <div class="black-hd-holder">
            <h6>Complaint Detail</h6>
            <span class="complaint-assignby"><strong>Assigned by: </strong><span data-bind="text:ComplaintAssignByName"></span></span>
            @*<span class="complaint-assignby"><strong>Assigned by:</strong> Reviewer</span>*@
        </div>
        <div data-bind="visible:complaintDetailsLoaded">

            <partial name="_ComplaintDetailViewPartial" />
            <div class="file-attacments" data-bind="">
                <partial name="_ComplaintDetailsAttachmentsPartial" />
            </div>
            <div class="comments-section">
                <partial name="_ComplaintDetailsCommentsPartial" />
            </div>
         
        </div>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            var viewModel = {
                CitizenPhoneNumber: ko.observable(),
                CitizenName: ko.observable(),
                CitizenEmailAddress: ko.observable(),
                CitizenCnic: ko.observable(),
                ComplaintTitle: ko.observable(),
                ComplaintType: ko.observable(),
                ComplaintDescription: ko.observable(""),
                ComplaintCode: ko.observable(),
                complaintDetailsLoaded: ko.observable(false),
                ComplaintStatusList: ko.observableArray(),
                ComplaintStatus: ko.observable(),
                Location: ko.observable(),
                UserList: ko.observableArray(),
                ComplaintCategory: ko.observable(),
                CreatedOrModifiedDate: ko.observable(),
                ComplaintLogs: ko.observableArray(),
                complaintAttachments: ko.observableArray(),
                SelectedStatus: ko.observable(),
                SelectedUser: ko.observable(),
                pageLoaded: ko.observable(false),
                ComplaintComments: ko.observable().extend({ required: true, maxLength: 500 }),
                ComplaintId: ko.observable(),
                ComplaintAssignTo: ko.observable(),
                ComplaintAssignByName: ko.observable(),
                errors: ko.observable(false),
                showError: ko.observable(false),
                AllowDelete: ko.observable(false)
            }
           
            $lib.showSpinner(true);

            $lib.http.get(`/complaint/${'@RouteData.Values["id"]'}`, (err, res) => {
                $lib.showSpinner(false);
                viewModel.pageLoaded(true);
                if (err) return;
                
                const SOURCE_TYPE_COMPLAINT = 5;
                viewModel.CitizenPhoneNumber(res.CitizenPhoneNumber);
                viewModel.CitizenName(res.CitizenName);
                viewModel.CitizenEmailAddress(res.CitizenEmailAddress);
                viewModel.CitizenCnic(res.CitizenCnic);
                viewModel.ComplaintTitle(res.ComplaintTitle);
                if (res.ComplaintDescription != "undefined")
                    viewModel.ComplaintDescription(res.ComplaintDescription);

                viewModel.ComplaintCode(res.ComplaintCode);
                viewModel.ComplaintCategory(res.ComplaintCategory["CategoryDescription"]);
                viewModel.ComplaintStatus(res.ComplaintStatus["ComplaintStatus"]);
                viewModel.Location(res.Location["LocationName"]);
                viewModel.complaintDetailsLoaded(true);
                viewModel.CreatedOrModifiedDate(res.ModifiedDate || res.CreatedDate);
                viewModel.ComplaintId(res.ComplaintId);
                
                
                $lib.http.get(`/attachments/source/${SOURCE_TYPE_COMPLAINT}/id/${res.ComplaintId}`, (err, res) => {
                    
                    viewModel.complaintAttachments(res);
                })
                $lib.http.get(`/complaint/${res.ComplaintId}/logs`, (err, res) => {
                    viewModel.ComplaintLogs(res);

                    if (res.length > 0)
                        viewModel.ComplaintAssignByName(res[res.length - 1].ComplaintAssignByNavigation.FirstName + " " + res[res.length - 1].ComplaintAssignByNavigation.LastName);
                    else
                        viewModel.ComplaintAssignByName("Public User");
                   // viewModel.ComplaintAssignByName(res[res.length - 1].ComplaintAssignByNavigation.FirstName + " " + res[res.length - 1].ComplaintAssignByNavigation.LastName);
                })
            });

            viewModel.downloadFile = function (event) {
                $util.downloadFile(event.AttachmentId);
            }

            viewModel.timeSince = function (date) {
                return $util.timeSince(new Date(date)) + " ago";
            }

            viewModel.deleteAttachment = function (event) {
                var attachmentId = event.AttachmentId;
                $services.deleteAttachment(attachmentId, (err, res) => {
                    if (!err) {
                        $("#att" + attachmentId).remove();
                    }
                });
                
            }
            viewModel.onFormSubmit = function () {
                var payload = {
                    complaintId: viewModel.ComplaintId(),
                    complaintStatusId:viewModel.SelectedStatus(),
                    ComplaintAssignTo:viewModel.SelectedUser(),
                    ComplaintComments:viewModel.ComplaintComments()
                }
                $lib.http.put(`/complaint/${payload.complaintId}`, payload, (err, res) => {
                    if (err) return;                    
                    console.log("Complaint updated successfully.");
                    localStorage.setItem("successMessage", "Complaint updated successfully.");                
                    $util.navigateUrl("complaints");
                })
            }
            $lib.http.get(`/complaint-status`, (err, res) => {
                if (err) return;
                viewModel.ComplaintStatusList(res);
            })
            $lib.http.get(`/users/short-list`, (err, res) => {
                if (err) return;
                viewModel.UserList(res);
            })
            $lib.bindUI(viewModel);
        })
    </script>
}
