@page
@{
    ViewData["Title"] = "FAQ Management";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@*<script src="~/ckeditor/ckeditor.js"></script>*@

<script src="https://cdn.ckeditor.com/ckeditor5/12.1.0/classic/ckeditor.js"></script>
@*<script src="~/ckeditor5-image-master/src/image"></script>*@

<title>FAQs Management</title>

<div class="table-box">
    <div class="hd-holder">
        <h6>FAQs Management</h6>
        <span class="bd-line"></span>
    </div>
    <div class="search-bar news-page">
        <div class="row">
            <div class="col-md-6 left-sec">
                <div class="add-user">
                    <a data-toggle="modal" data-target="#modalpopup" data-bind="click:onAdd" class="customBtn">Add FAQ</a>

                </div>
            </div>
            <div class="col-md-6 rit-sec">
                <div class="search-form">
                    <form class="form-inline">
                        <ul class="nomargin">
                            <li class="length length1">
                                <input type="text" data-bind="value:searchTitle" class="form-control" placeholder="Enter FAQ Title">
                            </li>
                            <li class="length length2">
                                <button type="submit" data-bind="click: onSearch" class="customBtn full-width-btn">Search</button>
                            </li>
                        </ul>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row-status">
        <div class="row">
            <div class="col-sm-10">
                <p>Total Record(s): <b data-bind="text: totalRecordsCount"></b></p>
            </div>
        </div>
    </div>
    <div class="table-area" style="display:none" data-bind="visible:pageLoaded">
        <table class="table table-bordered text-left">
            <thead class="thead-light">
                <tr>
                    <th class="sorting" style="cursor: pointer" data-bind="click: viewModel.onSort.bind($data, 'FaqTitle')">
                        FAQ Title
                        <span class="sort-icons">
                            <i class="fa fa-fw fa-caret-up a1"></i>
                            <i class="fa fa-fw fa-caret-down a2"></i>
                        </span>
                    </th>
                    <th class="text-center" width="200">Actions</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: faqList">
                <tr>
                    <td data-bind="text: FaqId, visible: false"></td>
                    <td data-bind="text: FaqTitle"></td>
                    <td class="text-center action-items">
                        <span data-toggle="modal" data-target="#viewModalpopup" data-bind="click: $parent.onView" title="View" class="icon-view-icon icon"></span>
                        <span data-toggle="modal" data-target="#modalpopup" data-bind="click: $parent.onEdit" title="Edit" class="icon-edit-icon icon"></span>


                        <span data-bind="click: $parent.onDelete" title="Delete" class="icon-del-icon icon"></span>
                    </td>
                </tr>
            </tbody>
            <tbody data-bind="if: faqList().length <= 0">
                <tr>
                    <td colspan="3" align="center">
                        <span>No Records Found.</span>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="col-sm-12">
            <div class="row">
                <ul class="pagination col-sm-6">
                    <li class="page-item" data-bind="class: getPreviousButtonClass">
                        <a class="page-link left" href="#" data-bind="click: onPrevious"><span class="fa fa-caret-left"></span></a>
                    </li>
                    <li>
                        <input type="text" class="page-link form-control" data-bind="integerInput, propertyName: 'totalPagesCount', value: currentPageNo, event: { change: onPageChange }" />
                    </li>
                    <li><p>of <span data-bind="text: totalPagesCount"></span></p></li>
                    <li class="page-item" data-bind="class: getNextButtonClass">
                        <a class="page-link right" href="#" data-bind="click: onNext"><span class="fa fa-caret-right"></span></a>
                    </li>
                </ul>
                <div class="records-field col-sm-6 text-right">
                    <label>
                        Records per page
                    </label>
                    <div class="custom-dropdown cus-sel">
                        <select class="form-control" id="ddlRecordsPerPage" data-bind="options: recordsPerPageList,
                                                                                optionsText: 'Text',
                                                                                optionsValue: 'Value',
                                                                                value: selectedPageSize"></select>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Add Faq box !-->
    <div class="modal fade popup" id="modalpopup" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <div class="hd-holder  modal-title">
                        <h6 data-bind="text:popupName"></h6>
                        <span class="bd-line"></span>
                    </div>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="login custom-form">
                    <div class="row justify-content-center align-items-center">
                        <div class="login-cnt-holder">

                            <div class="login-container">
                                <form>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group" data-bind="class: addFocus">
                                                <input name="id" data-bind="value:faqId, visible: false" id="id">
                                                <label for="firstname">Enter FAQ Title </label>
                                                <input type="username" name="title" data-bind="value:faqTitle, enable:isEdit" id="title" class="form-control pretty-input" required>
                                                <div class="invalid-feedback">Enter valid FAQ Title</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group">
                                                <textarea name="editor" id="editor" placeholder="Type something" rows="20" cols="80"></textarea>
                                                @*<div id="editor" class="custom-editor mb20 text-left">
                                                        <div id='edit2'></div>
                                                    </div>*@
                                            </div>
                                        </div>
                                    </div>

                                    @*<div class="col-md-12" style="display:none" data-bind="visible:(alreadyAttachedFiles().length > 0)">
                                            <div class="complaint-holder text-left">
                                                <div class="file-attacments">
                                                    <div class="inner-container mt10">
                                                        <div class="row">
                                                            <div class="col-md-12">
                                                                <h6>Old Attacments:</h6>
                                                            </div>
                                                        </div>
                                                        <div class="row" data-bind="foreach:alreadyAttachedFiles()">
                                                            <div class="col-md-6">
                                                                <div class="attachment-detail">
                                                                    <div class="file-status"><span><img src="images/doc-icon.svg" alt=""></span><i data-bind="text:OriginalFileName"></i></div>
                                                                    <div class="file-action">
                                                                        <span href="" data-bind="click: $parent.onFilePreview"><img src="images/view-icon-news.svg" alt=""></span>
                                                                        <span href="" data-bind="click: $parent.onFileDelete"><img src="images/del-icon-news.svg" alt=""></span>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>*@
                                    <div class="col-md-12" style="display:none" data-bind="visible:(fileModelList().length > 0)">
                                        <div class="complaint-holder text-left">
                                            <div class="file-attacments">
                                                <div class="inner-container mt10">
                                                    <div class="row">
                                                        <div class="col-md-12">
                                                            <h6>Attacments:</h6>
                                                        </div>
                                                    </div>
                                                    <div class="row" data-bind="foreach:fileModelList()">
                                                        <div class="col-md-6">
                                                            <div class="attachment-detail">
                                                                <div class="file-status"><span><img src="~/images/doc-icon.svg" alt=""></span><i data-bind="text:fileName"></i></div>
                                                                <div class="file-action">
                                                                    <span href="" data-bind="click: $parent.onFilePreview" title="View"><img src="~/images/view-icon-news.svg" alt=""></span>
                                                                    <span href="" data-bind="click: $parent.onFileDelete" title="Delete"><img src="~/images/del-icon-news.svg" alt=""></span>
                                                                </div>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    @*<div class="row">
                                            <div class="col-md-12 text-left">
                                                <div class="fileContainer">
                                                    <input id="file-upload" multiple type="file" data-bind="event:{change:onFileSelect}, enable:isEdit" />
                                                    <a href="#"> Choose File </a>
                                                </div>
                                                <p>Please upload related attachments (jpg, png, pdf are allowed.)</p>
                                            </div>
                                        </div>*@

                                    <div class="sub-btns text-left">
                                        <button href="#" data-bind="click: onSave, enable:isEdit" class="customBtn">Save</button>
                                        @*<button data-bind="click: onPreview" class="customBtn whiteBtn">Preview</button>*@
                                        <button data-bind="click: onDiscard, enable:isEdit" class="customBtn greyBtn">Discard</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- View FAQ Modal !-->
    <div class="modal fade popup" id="viewModalpopup" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <div class="hd-holder  modal-title">
                        <h6 data-bind="text:popupName"></h6>
                        <span class="bd-line"></span>
                    </div>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="login custom-form">
                    <div class="row justify-content-center align-items-center">
                        <div class="login-cnt-holder">

                            <div class="login-container">
                                <form>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group" data-bind="class: addFocus">
                                                <input name="id" data-bind="value:faqId, visible: false" id="id">
                                                <input type="username" name="title" data-bind="value:faqTitle, enable:isEdit" id="title" class="form-control pretty-input" required>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group">
                                                <textarea name="editor" id="vieweditor" rows="20" cols="80"></textarea>

                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-12" style="display:none" data-bind="visible:(alreadyAttachedFiles().length > 0)">
                                        <div class="complaint-holder text-left">
                                            <div class="file-attacments">
                                                <div class="inner-container mt10">
                                                    <div class="row">
                                                        <div class="col-md-12">
                                                            <h6>Attacments:</h6>
                                                        </div>
                                                    </div>
                                                    <div class="row" data-bind="foreach:alreadyAttachedFiles()">
                                                        <div class="col-md-6">
                                                            <div class="attachment-detail">
                                                                <div class="file-status"><span><img src="~/images/doc-icon.svg" alt=""></span><i data-bind="text:OriginalFileName"></i></div>
                                                                <div class="file-action">
                                                                    <span href="" data-bind="click: $parent.onFilePreview" title="View"><img src="~/images/view-icon-news.svg" alt=""></span>

                                                                </div>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                    </div>
                                    <div class="sub-btns text-left">
                                        <button type="button" class="customBtn" data-dismiss="modal" data-target="#viewModalpopup">Close</button>

                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section scripts{
    <script>

        $(document).ready(function () {
            // $lib.bindUI(viewModel);

            viewModel.errors.showAllMessages(false);
            viewModel.currentPageNo(1);

            fillRecordsPerPage();

            pageSize_Change();
        });

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        var theEditor;

        ClassicEditor
            .create(document.querySelector('#editor'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],
                image: {
                    // You need to configure the image toolbar, too, so it uses the new style buttons.
                    toolbar: ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],

                    styles: [
                        // This option is equal to a situation where no style is applied.
                        'full',

                        // This represents an image aligned to the left.
                        'alignLeft',

                        // This represents an image aligned to the right.
                        'alignRight'
                    ]
                }
            })
            .then(editor => { theEditor = editor; })
            .catch(error => {
                console.error(error);
            });

        var theEditorView;
            ClassicEditor
           .create(document.querySelector('#vieweditor'), {
               extraPlugins: [MyCustomUploadAdapterPlugin]
            })
                .then(editor => { theEditorView = editor; })
            .catch(error => {
              console.error(error);
            });
        var selectListModel = function (value, text) {
            this.Text = text;
            this.Value = value;
        }

            var viewModel = {
                searchTitle: ko.observable(""),
                faqTitle: ko.observable().extend({ required: true, maxLength: 100 }),
                faqDetail: ko.observable(""),
                faqId: ko.observable(),
                faqList: ko.observableArray(),
                faqDescription: ko.observable(),
                isEdit: ko.observable(false),
                isPost: ko.observable(false),
                popupName: ko.observable(),
                errors: ko.observable(),
                selectedFiles: ko.observableArray(),
                alreadyAttachedFiles: ko.observableArray(),
                totalPagesCount: ko.observable(0),
                totalRecordsCount: ko.observable(0),
                currentPageNo: ko.observable(1),
                orderBy: ko.observable("CreatedDate"),
                isAscendingOrder: ko.observable(false),
                selectedPageSize: ko.observable(10),
                recordsPerPageList: ko.observableArray([]),
                addFocus: ko.pureComputed(function () {
                    var faqId = viewModel.faqId();
                    if (faqId && !isNaN(parseInt(faqId)) && parseInt(faqId) > 0)
                        return "focused";
                    else
                        return "";
                }),
                fileModel: {
                    fileId: ko.observable(),
                    fileName: ko.observable(),
                    fileSource: ko.observable(),
                },
                fileModelList: ko.observableArray(),
                pageLoaded: ko.observable(false),
        }

        viewModel.getPreviousButtonClass = ko.pureComputed(function () {

            var currentPageNumber = parseInt(this.currentPageNo());
            return (currentPageNumber <= 1) ? '' : 'active';
        }, viewModel);

        viewModel.getNextButtonClass = ko.pureComputed(function () {

            var currentPageNumber = parseInt(this.currentPageNo());
            var totalPagesCount = parseInt(this.totalPagesCount());
            return (currentPageNumber < totalPagesCount) ? 'active' : '';
        }, viewModel);

            function GridLoad() {
                viewModel.pageLoaded(false);
                if (!isNaN(parseInt(viewModel.currentPageNo())) && parseInt(viewModel.currentPageNo()) > 0) {

                    var queryParams = {
                        FaqTitle: viewModel.searchTitle(),
                        PageIndex: parseInt(viewModel.currentPageNo()) - 1,
                        OrderBy: viewModel.orderBy(),
                        SortDirection: viewModel.isAscendingOrder() ? "Ascending" : "Descending",
                        PageSize: viewModel.selectedPageSize()
                    };

                    //var parameters = "filter:FaqTitle-" + queryParams.FaqTitle + ";" +
                    //    "orderby:"+";size:10;index:" + queryParams.PageIndex;
                    var parameters = "filter:FaqTitle=" + queryParams.FaqTitle + ";" +
                        "orderby:" + queryParams.OrderBy + "=" + queryParams.SortDirection + ";size:" + queryParams.PageSize + ";index:" + queryParams.PageIndex;

                    $lib.showSpinner(true);
                    $lib.http.get('/Faq?SearchParams=' + parameters, (err, res) => {
                        $lib.showSpinner(false);
                        viewModel.pageLoaded(true);
                        if (err) return;
                        else {
                            viewModel.faqList(res.Records);
                            viewModel.totalPagesCount(res.TotalPages);
                            viewModel.totalRecordsCount(res.TotalRecords);
                        }
                    })
                }
                else {
                    //viewModel.listModel.currentPageNo(1)
                    $toastMessages.showError("Invalid Page Number");
                    viewModel.pageLoaded(true);
                }
            }

            function GetData(id) {
                $lib.http.get('/faq/' + id, (err, res) => {
                    if (err) return;
                    else {
                        viewModel.faqId(res.FaqId);
                        viewModel.faqTitle(res.FaqTitle);
                        viewModel.faqDescription(res.FaqDescription);
                        theEditor.setData(res.FaqDescription);
                        var div = document.createElement("div");
                        div.innerHTML = res.FaqDescription;
                        var text = div.textContent || div.innerText || "";
                        viewModel.faqDetail(text);

                        if (!viewModel.isEdit()) {
                            theEditorView.setData(res.FaqDescription);
                            theEditorView.isReadOnly = true;
                        }

                        viewModel.alreadyAttachedFiles(res.Attachments);

                        for (var i = 0; i < viewModel.alreadyAttachedFiles().length; i++) {
                            viewModel.fileModel.fileId = viewModel.alreadyAttachedFiles()[i].AttachmentId;
                            viewModel.fileModel.fileName = viewModel.alreadyAttachedFiles()[i].OriginalFileName;
                            viewModel.fileModelList.push(JSON.parse(JSON.stringify(viewModel.fileModel)));
                            //formData.append('files', files[i]);
                        }
                        //viewModel.selectedFiles(res.Attachments);
                    }
                })
            }

            function pageSize_Change() {

                viewModel.selectedPageSize.subscribe(function () {
                    viewModel.currentPageNo(1);
                    GridLoad();
                });
            }
            function fillRecordsPerPage() {

                viewModel.recordsPerPageList([
                    new selectListModel(10, "10"),
                    new selectListModel(20, "20")
                ]);
            }

        GridLoad();

        viewModel.onPageChange = function () {
            viewModel.currentPageNo(1);
            GridLoad();
        }

        viewModel.onSearch = function () {
            viewModel.currentPageNo(1);
                GridLoad();
            }

            viewModel.onSave = function () {
                //console.log("OnSave");

                var formData = new FormData();
                var files = this.selectedFiles();
                for (var i = 0; i < files.length; i++) {
                    formData.append('files', files[i]);
                }

                if (viewModel.errors().length == 0) {
                    var data = theEditor.getData();
                    //var data = $('#editor').froalaEditor('html.get');
                    var Model = {
                        //FaqId: this.faqId,
                        FaqTitle: this.faqTitle(),
                        FaqDescription: data,
                    };

                    for (var key in Model) {
                        formData.append(key, Model[key]);
                    }

                    if (Model.FaqTitle != "" && Model.FaqDescription != "") {
                        if (this.isPost()) {
                            $lib.http.postForm("/Faq", formData, (err, res) => {
                                if (err) return;
                                else {
                                    GridLoad();
                                    $("#modalpopup").modal("hide");
                                    $toastMessages.showSuccess('FAQ has added successfully.')
                                }
                            })
                        }
                        else {
                            var attachedfiles = this.alreadyAttachedFiles();
                            for (var i = 0; i < files.length; i++) {
                                formData.append('attachments', files[i]);
                            }

                            formData.append('ExistingAttachments', JSON.stringify(attachedfiles));

                            $lib.http.putForm('/Faq/' + this.faqId(), formData, (err, res) => {
                                if (err) return;
                                else {
                                    GridLoad();
                                    $("#modalpopup").modal("hide");
                                    $toastMessages.showSuccess('FAQ has updated successfully.');
                                }
                            });
                        }
                    }
                    else {
                        $toastMessages.showError('Please Enter All the Values.');
                    }

                }
                else {
                    viewModel.errors.showAllMessages();
                }
            }

            viewModel.onAdd = function (faq) {
                //console.log("onAdd");
                viewModel.popupName('Add FAQ');
                viewModel.faqId('');
                viewModel.faqTitle('');
                viewModel.faqDescription('');
                viewModel.searchTitle('');
                theEditor.setData('');
                //$('#editor').froalaEditor('html.set', '');
                viewModel.selectedFiles([]);
                viewModel.fileModelList([]);
                viewModel.isEdit(true);
                viewModel.isPost(true);
                viewModel.errors.showAllMessages(false);
            }

            viewModel.onView = function (faq) {
                //console.log("OnView");
                viewModel.selectedFiles([]);
                viewModel.fileModelList([]);
                viewModel.popupName('View FAQ');
                viewModel.isEdit(false);
                GetData(faq.FaqId)
            }

            viewModel.onEdit = function (faq) {
                //console.log("OnEdit");
                viewModel.selectedFiles([]);
                viewModel.fileModelList([]);
                viewModel.popupName('Edit FAQ');
                viewModel.isEdit(true);
                viewModel.isPost(false);
                GetData(faq.FaqId)
            }

            viewModel.onDelete = function (faq) {
                var title = "Delete Confirmation"
                var message = "Are you sure you want to remove? This action cannot be undone.";
                $util.confirmBox(title, message, (confirm) => {
                    if (confirm) {
                        $lib.http.delete('/faq/' + faq.FaqId, (err, res) => {
                            if (err) return;
                            else {
                                GridLoad();
                                $toastMessages.showSuccess('FAQ has deleted successfully.');
                            }

                        })
                    }
                })
            }

            viewModel.onFileSelect = function (elem, event) {

                const target = event.target;
                var files = event.target.files;
                var loop = 0;
                //var files = elem.files;
                if ((files.length + viewModel.alreadyAttachedFiles().length) > 6) {
                    alert('Maximum 6 files are allowed');
                    files = [];
                }

                for (var i = 0; i < files.length; i++) {
                    if (files[i].size > 1000000)  //1 MB allowed
                    {
                        alert(files[i].name + " \nToo big!");
                        files = [];
                    }
                    else {
                        switch (files[i].type) {
                            case 'image/png':
                            case 'image/jpeg':
                            case 'application/pdf':
                                break;
                            default:
                                alert('Unsupported File!');
                                files = [];
                        }
                    }

                }

                ko.utils.arrayForEach(files, function (file) {
                    var reader = new FileReader();
                    //self.selectedFiles([]);
                    // reader onload function is a callback from readAsDataURL
                    reader.onload = function (f) {
                        // result is base64 string
                        var b64 = (f.target.result);
                        viewModel.fileModel.fileId = Math.floor((Math.random() * 1000) + 1);;
                        viewModel.fileModel.fileName = files[loop].name;
                        viewModel.fileModel.fileSource = (f.target.result);
                        viewModel.fileModelList.push(JSON.parse(JSON.stringify(viewModel.fileModel)))

                        // if selectedFiles length less than
                        //if (self.selectedFiles().length < 3) {
                        //    //push into array
                        //    self.selectedFiles.push({ base64String: b64 });
                        //}
                        loop++;
                    };
                    var aa = reader.readAsDataURL(file);
                    

                });


                //for (var i = 0; i < files.length; i++) {
                //    viewModel.fileModel.fileId = Math.floor((Math.random() * 1000) + 1);;
                //    viewModel.fileModel.fileName = files[i].name;
                //    viewModel.fileModelList.push(JSON.parse(JSON.stringify(viewModel.fileModel)));
                //    //formData.append('files', files[i]);
                //}

                viewModel.selectedFiles(files);
                //viewModel.selectedFiles.push(JSON.parse(JSON.stringify(files)));
                //viewModel.selectedFiles(event.target.files);

        }

        viewModel.onchange = function () {

        }

            viewModel.onPreview = function () {
                var newWindow = window.open('PreviewPages/Configuration.html', '_blank');
                var content = theEditor.getData();

                $(newWindow).on('load', function () {
                    newWindow.document.getElementById("heading").innerHTML = 'FAQ';
                    newWindow.document.getElementById("divTitle").innerHTML = viewModel.faqTitle();
                    newWindow.document.getElementById("contentDescription").innerHTML = content;
                    newWindow.document.getElementById('date').style.display = 'none';

                });
        }

        viewModel.onDiscard = function () {
            var title = "Discard Confirmation"
            var message = "Are you sure you want to discard changes? This action cannot be undone.";
            $util.confirmBox(title, message, (confirm) => {
                if (confirm) {
                    $("#modalpopup").modal("hide");
                }
            })
        }

            viewModel.onPrevious = function () {

                var currentPageNo = parseInt(viewModel.currentPageNo());
                if (currentPageNo > 1) {
                    viewModel.currentPageNo(--currentPageNo);
                    GridLoad();
                }
            }

            viewModel.onNext = function () {

                var currentPageNo = parseInt(viewModel.currentPageNo());
                var totalPageCount = parseInt(viewModel.totalPagesCount());
                if (currentPageNo < totalPageCount) {
                    viewModel.currentPageNo(++currentPageNo);
                    GridLoad();
                }
        }

        viewModel.onSort = function (orderBy) {

            var previousOrderBy = viewModel.orderBy();
            var previousDirection = viewModel.isAscendingOrder();

            if (previousOrderBy.toLowerCase() != orderBy.toLowerCase()) {

                viewModel.isAscendingOrder(true);
                viewModel.orderBy(orderBy);
            }
            else
                viewModel.isAscendingOrder(!previousDirection);

            GridLoad();
        }

            viewModel.onFilePreview = function (file) {
                if (file.fileSource == undefined)
                    {
                        var id = "";
                        if (file.fileId == undefined) {
                            id = file.AttachmentId;
                        }
                        else {
                            id = file.fileId;
                        }
                      url = '@ViewBag.apiBaseUrl' + "/Attachment/" + id;
                      window.open(url, "_blank");
                }
                else {
                    var win = window.open();
                    win.document.write('<iframe src="' + file.fileSource + '" frameborder="0" style="border:0; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%;" allowfullscreen></iframe>');
                }
            }

            viewModel.onFileDelete = function (file) {
                var title = "Delete Confirmation"
                var message = "Are you sure you want to remove this file? This action cannot be undone.";
                $util.confirmBox(title, message, (confirm) => {
                    if (confirm) {
                        var id = file.fileId;

                        viewModel.alreadyAttachedFiles.remove(function (file) {
                            return file.AttachmentId == id;
                        });

                        viewModel.fileModelList.remove(function (file) {
                            return file.fileId == id;
                        });

                        if (viewModel.selectedFiles().length > 0) {
                            var array = Array.prototype.slice.call(viewModel.selectedFiles())

                            var index = array.findIndex(x => x.name == name);
                            array.splice(index, 1);
                            viewModel.selectedFiles(array);

                            //var fileArray = Array.prototype.slice.call(viewModel.fileModelList())
                            //var index = fileArray.findIndex(x => x.name == name);
                            //fileArray.splice(index, 1);
                            //viewModel.fileModelList(array);
                        }
                    }
                })
            }

            viewModel.errors = ko.validation.group(viewModel);

            $lib.bindUI(viewModel);
        //}())
    </script>

}
