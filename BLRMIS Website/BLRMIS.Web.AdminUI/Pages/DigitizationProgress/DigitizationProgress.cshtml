@page "/digitization"
@{
    ViewData["Title"] = "DigitizationProgress";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="table-box">
    <div class="hd-holder">
        <h6>Digitization Progress Management</h6>
        <span class="bd-line"></span>
    </div>

    <div class="modal fade popup" id="locationDetailModal" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <div class="hd-holder  modal-title">
                        <h6>Location Detail</h6>
                        <span class="bd-line"></span>
                    </div>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="login custom-form form-detail">
                    <div class="row justify-content-center align-items-center">
                        <div class="login-cnt-holder">
                            <div class="login-container">
                                <form>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <p><span data-bind="text: categoryDetails.LocationName"></span><strong>Category</strong></p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <p><span data-bind="text: categoryDetails.DigitizationProgressPercentage"></span><strong>Progress %</strong></p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <p><span data-bind="text: categoryDetails.Status" class="detail-user-status"></span><strong>Status</strong></p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="login-button">
                                        <button type="button" class="customBtn" data-dismiss="modal" data-target="#locationDetailModal">Close</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row-status">
        <div class="row">
            <div class="col-sm-10">
                <p>Total Record(s): <b data-bind="text: listModel.totalRecordsCount"></b></p>
            </div>
            <div class="col-sm-2">
                <div class="custom-dropdown">
                    <select class="form-control" id="ddlStatusFilter" data-bind="options: active,
                                                                                optionsText: 'Text',
                                                                                optionsValue: 'Value',
                                                                                value: listModel.selectedStatus,
                                                                                optionsCaption: 'All Status',
                                                                                event: { change: viewModel.onStatusFilterChange }"></select>
                </div>
            </div>
        </div>
    </div>

    <div class="table-area">
        <table class="table table-bordered text-left">
            <thead class="thead-light">
                <tr>
                    <th style="cursor: pointer" data-bind="click: viewModel.onSort.bind($data, 'LocationName')" class="sorting" width="40%">
                        Location Name
                        <span class="sort-icons">
                            <i class="fa fa-fw fa-caret-up a1" data-bind="click: viewModel.onSort.bind($data, 'LocationName', true)"></i>
                            <i class="fa fa-fw fa-caret-down a2" data-bind="click: viewModel.onSort.bind($data, 'LocationName', false)"></i>
                        </span>
                    </th>
                    <th style="cursor: pointer" data-bind="click: viewModel.onSort.bind($data, 'LocationName')" class="sorting" width="30%">
                        Digitization Progress (%)
                        <span class="sort-icons">
                            <i class="fa fa-fw fa-caret-up a1" data-bind="click: viewModel.onSort.bind($data, 'LocationName', true)"></i>
                            <i class="fa fa-fw fa-caret-down a2" data-bind="click: viewModel.onSort.bind($data, 'LocationName', false)"></i>
                        </span>
                    </th>
                    <th style="cursor: pointer" data-bind="click: viewModel.onSort.bind($data, 'Active')" class="sorting">
                        Status
                        <span class="sort-icons">
                            <i class="fa fa-fw fa-caret-up a1" data-bind="click: viewModel.onSort.bind($data, 'Active', true)"></i>
                            <i class="fa fa-fw fa-caret-down a2" data-bind="click: viewModel.onSort.bind($data, 'Active', false)"></i>
                        </span>
                    </th>
                    <th class="text-center">Action</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listModel.list">
                <tr>
                    <td>
                        <a href="#" class="green" data-bind="text: LocationName, click: $root.onEdit.bind($data, true), disable: $root.isRequestInProcess()"></a>
                    </td>
                    <td data-bind="text: $data.DigitizationProgressPercentage"></td>
                    <td class="text-center" data-bind="class: Active ? 'active-st' : 'inactive-st'">
                        <span data-bind="text: (Active ? 'Active' : 'Inactive'), class: !Active ? 'inactive-st' : 'green'">
                        </span>
                    </td>
                    <td class="text-center action-items">
                        <span class="icon-edit-icon icon" title="Edit" data-bind="click: $root.onEdit.bind($data, false), disable: $root.isRequestInProcess()"></span>
                    </td>
                </tr>
            </tbody>
            <tbody data-bind="if: listModel.list().length <= 0">
                <tr>
                    <td colspan="3" align="center">
                        <span>No Records Found.</span>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="col-sm-12">
            <div class="row">
                <ul class="pagination col-sm-6">
                    <li class="page-item" data-bind="class: getPreviousButtonClass">
                        <a class="page-link left" href="#" data-bind="click: viewModel.onPrevious"><span class="fa fa-caret-left"></span></a>
                    </li>
                    <li>
                        <input type="text" class="page-link form-control" data-bind="integerInput, propertyName: 'totalPagesCount', value: viewModel.listModel.currentPageNo, event: { change: viewModel.onPageChange }" />
                    </li>
                    <li><p>of <span data-bind="text: viewModel.listModel.totalPagesCount"></span></p></li>
                    <li class="page-item" data-bind="class: getNextButtonClass">
                        <a class="page-link right" href="#" data-bind="click: viewModel.onNext"><span class="fa fa-caret-right"></span></a>
                    </li>
                </ul>
                <div class="records-field col-sm-6 text-right">
                    <label>
                        Records per page
                    </label>
                    <div class="custom-dropdown cus-sel">
                        <select class="form-control" id="ddlRecordsPerPage" data-bind="options: listModel.recordsPerPageList,
                                                                                optionsText: 'Text',
                                                                                optionsValue: 'Value',
                                                                                value: listModel.selectedPageSize"></select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade popup" id="locationFormModal" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <div class="hd-holder  modal-title">
                        <h6 data-bind="text: formHeading"></h6>
                        <span class="bd-line"></span>
                    </div>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="login custom-form">
                    <div class="row justify-content-center align-items-center">
                        <div class="login-cnt-holder">
                            <div class="login-container">
                                <form>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group" data-bind="class: addFocus" id="locationName">
                                                <label for="LocationName">Location Name</label>
                                                <input type="text" class="form-control pretty-input" id="LocationName" data-bind="value: formModel.LocationName" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group" data-bind="class: addFocus" id="digitizationProgressPercentage">
                                                <label for="DigitizationProgressPercentage">Progress %</label>
                                                <input type="text" class="form-control pretty-input" id="DigitizationProgressPercentage" data-bind="value: formModel.DigitizationProgressPercentage, integerInputGeneric, propertyName: 'DigitizationProgressPercentage'">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="login-button">
                                        <button type="submit" class="customBtn" data-bind="text: saveButtonText, click: onFormSubmit, disable: isRequestInProcess()"></button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section scripts {

    <script type="text/javascript">

        $(document).ready(function () {

            viewModel.formModel.errors = ko.validation.group(viewModel.formModel);
            $lib.bindUI(viewModel);
            $lib.setPageTitle("Digitization Management");

            viewModel.formModel.errors.showAllMessages(false);
            viewModel.listModel.currentPageNo(1);

            fillRecordsPerPage();
            fillStatus();
            viewModel.listModel.selectedStatus(1);
            getLocationList();
            pageSize_Change();
        });

        var viewModel = {

            formModel: {
                LocationId: ko.observable(null),
                LocationName: ko.observable("").extend({ required: true, maxLength: 20 }),
                DigitizationProgressPercentage: ko.observable(""),
                Active: ko.observable("").extend({ required: true }),
                errors: null
            },
            listModel: {
                list: ko.observableArray(null),
                totalPagesCount: ko.observable(0),
                currentPageNo: ko.observable(0),
                orderBy: ko.observable("CreatedDate"),
                isAscendingOrder: ko.observable(false),
                totalRecordsCount: ko.observable(0),
                recordsPerPageList: ko.observableArray([]),
                selectedStatus: ko.observable(null),
                selectedPageSize: ko.observable(10)
            },
            categoryDetails: {
                LocationName: ko.observable(""),
                DigitizationProgressPercentage: ko.observable(""),
                Status: ko.observable("")
            },
            isRequestInProcess: ko.observable(false),
            formHeading: ko.observable("Add Location"),
            addFocus: ko.pureComputed(function () {

                var locationId = this.viewModel.formModel.LocationId();
                if (locationId && !isNaN(parseInt(locationId)) && parseInt(locationId) > 0)
                    return "focused";
                else {
                    $("#locationName").removeClass("focused");
                    return "";
                }
            }),
            getPreviousButtonClass: ko.pureComputed(function () {

                var currentPageNumber = parseInt(this.viewModel.listModel.currentPageNo());
                return (currentPageNumber <= 1) ? '' : 'active';
            }),
            getNextButtonClass: ko.pureComputed(function () {

                var currentPageNumber = parseInt(this.viewModel.listModel.currentPageNo());
                var totalPagesCount = parseInt(this.viewModel.listModel.totalPagesCount());
                return (currentPageNumber < totalPagesCount) ? 'active' : '';
            }),
            saveButtonText: ko.observable("Add"),
            active: ko.observableArray([]),
            onFormSubmit: onSubmit,
            onEdit: getCategoryDetails,
            onShowDetails: getCategoryDetails,
            onPageChange: getLocationList,
            onPrevious: onPrevious,
            onNext: onNext,
            onSort: onSort,
            onStatusChange: onStatusChange,
            onStatusFilterChange: getLocationList
        }

        $('#locationFormModal').on('hidden.bs.modal', function () {

            viewModel.saveButtonText("Add");
            viewModel.formHeading("Add Location");
            resetForm();
        });

        var selectListModel = function (value, text) {
            this.Text = text;
            this.Value = value;
        }

        function getLocationList() {

            if (!isNaN(parseInt(viewModel.listModel.currentPageNo())) && parseInt(viewModel.listModel.currentPageNo()) > 0) {

                var queryParams = {
                    PageIndex: parseInt(viewModel.listModel.currentPageNo()) - 1,
                    OrderBy: viewModel.listModel.orderBy(),
                    SortDirection: viewModel.listModel.isAscendingOrder() ? "Ascending" : "Descending",
                    Status: viewModel.listModel.selectedStatus() == null || viewModel.listModel.selectedStatus() == undefined ? "" :
                        (viewModel.listModel.selectedStatus() == 1 ? true : false),
                    PageIndex: parseInt(viewModel.listModel.currentPageNo()) - 1,
                    OrderBy: viewModel.listModel.orderBy(),
                    PageSize: viewModel.listModel.selectedPageSize()
                };
                var parameters = "filter:Active=" + queryParams.Status + ";orderby:" + queryParams.OrderBy + "=" + queryParams.SortDirection + ";size:" + queryParams.PageSize +
                    ";index:" + queryParams.PageIndex;

                $lib.showSpinner(true);
                $lib.http.get("/location?param=" + parameters, fillCategoryList);
            }
            else {
                $toastMessages.showError("Invalid Page Number");
            }
        }

        function onPrevious() {

            var currentPageNo = parseInt(viewModel.listModel.currentPageNo());
            if (currentPageNo > 1) {
                viewModel.listModel.currentPageNo(--currentPageNo);
                getLocationList();
            }
        }

        function onNext() {

            var currentPageNo = parseInt(viewModel.listModel.currentPageNo());
            var totalPageCount = parseInt(viewModel.listModel.totalPagesCount());
            if (currentPageNo < totalPageCount) {
                viewModel.listModel.currentPageNo(++currentPageNo);
                getLocationList();
            }
        }

        function onSort(orderBy) {

            var previousOrderBy = viewModel.listModel.orderBy();
            var previousDirection = viewModel.listModel.isAscendingOrder();

            if (previousOrderBy.toLowerCase() != orderBy.toLowerCase()) {

                viewModel.listModel.isAscendingOrder(true);
                viewModel.listModel.orderBy(orderBy);
            }
            else
                viewModel.listModel.isAscendingOrder(!previousDirection);
            getLocationList();
        }

        function fillStatus() {

            viewModel.active([
                new selectListModel(1, "Active"),
                new selectListModel(0, "Inactive")
            ]);
        }

        function fillRecordsPerPage() {

            viewModel.listModel.recordsPerPageList([
                new selectListModel(10, "10"),
                new selectListModel(20, "20")
            ]);
        }

        function pageSize_Change() {

            viewModel.listModel.selectedPageSize.subscribe(function () {
                viewModel.listModel.currentPageNo(1);
                getLocationList();
            });
        }

        function onStatusChange(index) {

            this.rowIndex = index;
            viewModel.isRequestInProcess(true);
            $lib.showSpinner(true);
            $lib.http.get(`/location/${this.LocationId}/ChangeStatus`, afterStatusChanged.bind(this));
        }

        function afterStatusChanged(err) {

            $lib.showSpinner(false);
            if (err)
                return
            else {
                var items = JSON.parse(JSON.stringify(viewModel.listModel.list()));
                items[this.rowIndex].Active = !this.Active;
                viewModel.listModel.list(items);
            }
            viewModel.isRequestInProcess(false);
        }

        function fillCategoryList(err, res) {

            $lib.showSpinner(false);
            if (err)
                return;
            else {
                viewModel.listModel.list(res.Records);
                viewModel.listModel.totalPagesCount(res.TotalPages);
                viewModel.listModel.totalRecordsCount(res.TotalRecords);
            }
        }

        function onSubmit() {

            if (viewModel.formModel.errors().length == 0) {

                if (viewModel.formModel.DigitizationProgressPercentage() > 100) {
                    $toastMessages.showError("Value cannot be greater than 100");
                    return;
                }

                var locationId = viewModel.formModel.LocationId();
                viewModel.isRequestInProcess(true);
                $lib.showSpinner(true);
                if (locationId && !isNaN(parseInt(locationId)) && parseInt(locationId) > 0) {
                    $lib.http.put("/location/" + locationId, viewModel.formModel, (err, res) => afterCategorySaved(err, res, true));
                }
                else {
                    $lib.http.post("/location/", viewModel.formModel, (err, res) => afterCategorySaved(err, res, false));
                }
            } else {
                viewModel.formModel.errors.showAllMessages();
            }
        }

        function afterCategorySaved(err, res, onEdit) {

            if (err)
                return;
            else {
                if (!onEdit) {
                    viewModel.listModel.isAscendingOrder(false);
                    $toastMessages.showSuccess("Category is created successfully");
                }
                else
                    $toastMessages.showSuccess("Category information is updated successfully");
                resetForm();
                $("#locationFormModal").modal("hide");
                getLocationList();
            }
            $lib.showSpinner(false);
            viewModel.isRequestInProcess(false);
        }

        function getCategoryDetails(showDetails) {

            $lib.showSpinner(true);
            viewModel.isRequestInProcess(true);
            if (showDetails)
                $lib.http.get("/location/" + this.LocationId, showCategoryDetails);
            else
                $lib.http.get("/location/" + this.LocationId, fillCategoryForm);
        }

        function showCategoryDetails(err, res) {

            $lib.showSpinner(false);
            viewModel.isRequestInProcess(false);
            if (err)
                return
            else {
                viewModel.categoryDetails.LocationName(res.LocationName);
                viewModel.categoryDetails.DigitizationProgressPercentage(res.DigitizationProgressPercentage);
                viewModel.categoryDetails.Status(res.Active ? 'Active' : 'Inactive');
                $("#locationDetailModal").modal("show", { backdrop: 'static', keyboard: false });
            }
        }

        function fillCategoryForm(err, res) {

            $lib.showSpinner(false);
            viewModel.isRequestInProcess(false);
            if (err)
                return;
            else {
                viewModel.formModel.LocationId(res.LocationId);
                viewModel.formModel.LocationName(res.LocationName);
                viewModel.formModel.DigitizationProgressPercentage(res.DigitizationProgressPercentage);
                viewModel.formModel.Active(res.Active);
                viewModel.formHeading("Edit Location");
                viewModel.saveButtonText("Save");
                $("#locationFormModal").modal("show", { backdrop: 'static', keyboard: false });
            }
        }

        function resetForm() {

            viewModel.formModel.LocationId("");
            viewModel.formModel.LocationId(null);
            viewModel.formModel.LocationName("");
            viewModel.formModel.DigitizationProgressPercentage("");
            viewModel.formModel.Active("");
            viewModel.formModel.errors.showAllMessages(false);

            viewModel.listModel.currentPageNo(1);
            viewModel.listModel.orderBy("CreatedDate");
        }

    </script>
}


