@page "/complaint/{id?}"
@{
    ViewData["Title"] = "ComplaintDetails";
}

<div id="main" class="innerpage complaint-detail">
    <div class="container">
        <div class="bg-holder2">
            <div class="row">
                <div class="col-md-12">
                    <div data-bind="if:IsVerificationRequired, visible:IsVerificationRequired" style="display:none">
                        <partial name="_ComplaintVerificationPartial">
                    </div>
                    <div data-bind="if:ComplaintClosed, visible:ComplaintClosed" style="display:none">
                        <partial name="_ComplaintFeedBackSubmmit">
                    </div>

                    @*<div class="alert alert-sm alert-info" data-bind="visible:HasComplaintMessage() != '', text:HasComplaintMessage">  </div>*@


                    <div class="complaint-holder" style="display:none" data-bind="visible:DetailsLoaded, if:ComplaintUpdatedMessage() == '' ">
                        <div class="hd-holder">
                            <h6>Complaint Detail</h6>
                            <span class="bd-line"></span>
                            @*<span class="complaint-assignby"><strong>Assigned by:</strong> Reviewer</span>*@
                        </div>

                        <div class="inner-container">
                            <div class="row">
                                <div class="headerbar clearfix">
                                    <div class="col-md-3"><strong> Complaint No: </strong></div>
                                    <div class="col-md-6"><p class="com-num" data-bind="text: ComplaintCode"></p></div>
                                    <div class="col-md-3">
                                        <span class="complaint-assignby-update">
                                            <strong>Last Updated: </strong>
                                            <span data-bind="date:CreatedOrModifiedDate, dateFormat:'DD-MMM-YY'"></span>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="table-box">

                            <div>
                                <partial name="_ComplaintDetailViewPartial" />
                                <div class="file-attacments" data-bind="">
                                    <partial name="_ComplaintDetailsAttachmentsPartial" />
                                </div>
                                <div class="comments-section  mt10">
                                    <partial name="_ComplaintDetailsCommentsPartial" />
                                </div>
                                <div class="complaint-status-form" style="display:none" data-bind="visible: showCommentsSection">
                                    <partial name="_ComplaintCommentBoxPartial" />
                                </div>
                                <div class="modal fade popup-overly" id="delete-confirmation">
                                    <div class="modal-dialog modal-sm modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header text-center">
                                                <div class="hd-holder  modal-title" ">
                                                    <h6>Delete Confirmation</h6>
                                                    <span class="bd-line"></span>
                                                </div>
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="delete-confirmation-text">
                                                <p>
                                                    Are you sure you want to remove this file? This action cannot be undone.
                                                </p>
                                                <div class="sub-btns text-left">
                                                    <button type="button" class="customBtn greyBtn" data-dismiss="modal">Close</button>
                                                    <a href="javascript:" class="btn btn-danger" data-bind="click:DeleteFile()">Delete</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            const COMPLAINT_SOURCE_TYPE = 5;
            const COMPLAINT_STATUS_COMPLETE = 4;
           // $lib.showSpinner(true);
        var viewModel = {
            CitizenPhoneNumber: ko.observable(),
            CitizenName: ko.observable(),
            CitizenEmailAddress: ko.observable(),
            CitizenCnic: ko.observable(),
            ComplaintTitle: ko.observable(),
            ComplaintDescription : ko.observable(""),
            ComplaintCode: ko.observable(),
            CreatedOrModifiedDate: ko.observable(),
            DetailsLoaded : ko.observable(false),
            complaintAttachments: ko.observableArray(),
         //   onResendVerificationCode: ko.observable(),
            DisableResentLink: ko.observable(false),
            VerificationCode: ko.observable(),
            EnableResendLink: ko.observable(false),
            TimeElapse: ko.observable("00:20"),
            ComplaintCategory: ko.observable(),
            ComplaintAssignTo: ko.observable(),
            ComplaintLogs: ko.observableArray(),
            complaintAttachments: ko.observableArray(),
            ComplaintComments: ko.observable().extend({ maxLength: 500 }),
            ComplaintId: ko.observable(),
                selectedFiles: ko.observableArray(),
            ComplaintStatusId: ko.observable(),
            ComplaintAssignBy: ko.observable(),
            Location: ko.observable(),
            ComplaintStatus: ko.observable(),
            errors: ko.observable(),
            IsVerificationRequired: ko.observable(false),
            VerificationCodeError: ko.observable(),
            HasComplaintMessage: ko.observable(""),
            IsSatisfied: ko.observable(false),
            IsUnSatisfied: ko.observable(false),
            IsError: ko.observable(false),
            ErrMessage: ko.observable(""),
            ComplaintClosed: ko.observable(false),
            ComplaintUpdatedMessage: ko.observable(""),
            UserOpinions: ko.observableArray([{
                    Text: "Satisfied",
                    Value: "1"
                },{
                    Text: "Not Satisfied",
                    Value: "2"
                }]),
            SelectedOpinion: ko.observable(),
            showCommentsSection: ko.observable(false)
            }

            var validRequest = sessionStorage.getItem("complaintSerach");
            if (validRequest == null) {
                $util.navigateUrl(`complaint-form`);
                return;
            }
            /*
            var complaintData = null; //JSON.parse(sessionStorage.getItem("complaintData"));
            var complaintAttachments = null; //JSON.parse(sessionStorage.getItem("complaintAttachmentData"));
            var complaintLogs = null; //JSON.parse(sessionStorage.getItem("complaintLogData"));

            if (complaintData != null) {
                viewModel.IsVerificationRequired(false);
                setViewModelForComplaint(complaintData);
                setViewModelForAttachments(complaintAttachments);
                setViewModelForLogs(complaintLogs);
                viewModel.timeSince = function (date) {
                    return $util.timeSince(new Date(date)) + " ago";
                }
                viewModel.onGoBackFromVerification = function () {
                    $util.navigateUrl(`/complaint-form`);
                }
                viewModel.onFormSubmit = function () {
                    var payload = {
                        complaintId: viewModel.ComplaintId(),
                        complaintStatusId: viewModel.ComplaintStatusId(),
                        ComplaintComments: viewModel.ComplaintComments(),
                        ComplaintAssignBy: 1018, // Complaient ID
                        ComplaintAssignTo: 4 // Reviewer
                    }
                    $lib.http.put(`/complaint/${payload.complaintId}`, payload, (err, res) => {
                        if (err) return;
                        console.log("Complaint updated successfully.");
                        //$util.navigateUrl("/complaints");
                    })
                }
                $lib.bindUI(viewModel);
                return;
            }*/
           
            var complainentEmail = null;//sessionStorage.getItem("ComplainentPhone");
            var complainentPhone = null;//sessionStorage.getItem("ComplainentEmail");
           
            var selectedComplaintAccessToken = sessionStorage.getItem("selectedComplaintAccessToken");
            sessionStorage.removeItem("selectedComplaintAccessToken");

            if (!selectedComplaintAccessToken) {
                if (complainentEmail == null && complainentPhone == null) {
                    $lib.showSpinner(true);
                    viewModel.HasComplaintMessage("");
                    $lib.http.get(`/complaint/search/@RouteData.Values["id"]`, (err, res) => {

                        if (err) {
                            if (err.responseJSON) {
                                viewModel.ComplaintClosed(true);
                                viewModel.DetailsLoaded(false);                              
                                viewModel.IsSatisfied(false);
                                viewModel.IsUnSatisfied(false);
                                viewModel.IsError(true);
                                viewModel.ErrMessage(err.responseJSON["description"]);
                                viewModel.HasComplaintMessage(err.responseJSON["description"]);
                            }

                            $lib.showSpinner(false);
                            viewModel.ComplaintClosed(true);
                            viewModel.DetailsLoaded(false);
                            viewModel.IsSatisfied(false);
                            viewModel.IsUnSatisfied(false);
                            viewModel.IsError(true);
                            viewModel.ErrMessage("We couldn’t find results for your search");
                            viewModel.HasComplaintMessage("No record found.");
                            return;
                        }
                        viewModel.CitizenEmailAddress(res.EmailAddress);
                        viewModel.CitizenPhoneNumber(res.PhoneNumber);
                        viewModel.IsVerificationRequired(true);
                        $lib.showSpinner(false);
                        EnableResendButton();
                        //console.log(res);
                    })
                } else {
                    viewModel.CitizenEmailAddress(complainentEmail);
                    viewModel.CitizenPhoneNumber(complainentPhone);
                    viewModel.IsVerificationRequired(false);
                }
            }
            else {

                viewModel.HasComplaintMessage(false);
                $lib.showSpinner(true);
                getComplaintDetails(selectedComplaintAccessToken);
            }

            var _selectedFileID;
            var _event;

            viewModel.ConfirmDeleteFile = function(eventName, elemID){

                if (eventName != null) {
                    $("#delete-confirmation").modal("show");

                    _selectedFileID = eventName;
                    _event = elemID;
                }
                
            }

            viewModel.DeleteFile = function (eventName, elemID) {
                var event = _event;
                if (event != null) {
                    var elemId = _selectedFileID; //viewModel.selectedFileID();
                    var event = _event;
                    var index = viewModel.selectedFiles().findIndex(i => i.name == event.name);
                    var arr = viewModel.selectedFiles();
                    viewModel.selectedFiles().splice(index, 1);
                    $("#" + elemId).remove();
                    $("#delete-confirmation").modal("hide");
                }

            }

           

            function setViewModelForComplaint(res) {
                viewModel.DetailsLoaded(true);
                viewModel.IsVerificationRequired(false);
                viewModel.ComplaintId(res.ComplaintId);
                viewModel.CitizenName(res.CitizenName);
                viewModel.CitizenCnic(res.CitizenCnic);
                viewModel.CitizenEmailAddress(res.CitizenEmailAddress);
                viewModel.CitizenPhoneNumber(res.CitizenPhoneNumber);
                viewModel.ComplaintTitle(res.ComplaintTitle);
                viewModel.ComplaintStatusId(res.ComplaintStatusId);
                if (res.ComplaintDescription != "undefined")
                 viewModel.ComplaintDescription(res.ComplaintDescription);
                viewModel.ComplaintCategory(res.ComplaintCategory["CategoryName"])
                viewModel.CreatedOrModifiedDate(res.ModifiedDate || res.CreatedDate);
                viewModel.ComplaintCode(res.ComplaintCode);
                viewModel.Location(res.Location["LocationName"]);
                viewModel.ComplaintStatus(res.ComplaintStatus["ComplaintStatus"]);
            }
            function setViewModelForAttachments(res) {
                viewModel.complaintAttachments(res);
            }
            function setViewModelForLogs(res) {
                viewModel.ComplaintLogs(res);
            }

            var resendAttempt = 0;
            viewModel.onResendVerificationCode = function () {
               
                if (viewModel.DisableResentLink() == "") {
                    if (resendAttempt < 3) {
                       
                        viewModel.EnableResendLink(false);
                        EnableResendButton();
                        SendVerificationCode();
                        resendAttempt++;
                    }
                    else {
                        //viewModel.EnableResendLink(false);
                        //  $toastMessages.showInfo("You have attempted 3 resends.");
                        viewModel.DisableResentLink("disabled");
                    }
                }


                /* if (viewModel.errors().length > 0) {
                     viewModel.errors.showAllMessages();
                     return;
                 };
                 var payload = {
                     PhoneNumber: viewModel.PhoneNumber,
                     EmailAddress: viewModel.EmailAddress
                 }
                 viewModel.displayVerification(true);
                 $lib.http.post('/verification-token', payload, (err, res) => {
                     if (err) return $lib.handleError(err);
                     console.log(res);
                 })*/
            }


            // fire when verifcation code submit button is pressed.
            viewModel.onVerificationCodeSubmit = function () {

                var verificationCode = viewModel.VerificationCode();
                if (!verificationCode || verificationCode == "") {
                    $("#verificationField").addClass("error-message-holder");
                    viewModel.VerificationCodeError("Please enter verification code.");
                    return;
                }
                $lib.showSpinner(true);
                var complaintCode = '@RouteData.Values["id"]';
                $lib.http.get(`/complaint/${complaintCode}/verify/${verificationCode}`, (err, res) => {

                    $lib.showSpinner(false);
                    if (err) {
                        $("#verificationField").addClass("error-message-holder");
                        viewModel.VerificationCodeError("Invalid verification code.");
                        return;
                    };
                    var accessToken = res;
                    if (!accessToken) {
                        $lib.handleError("Complaint not found.");
                        return;
                    }
                    $lib.showSpinner(true);
                    viewModel.HasComplaintMessage("");
                    getComplaintDetails(accessToken);
                })
            }

            function SendVerificationCode() {
                if (viewModel.errors().length > 0) {
                    viewModel.errors.showAllMessages();
                    return;
                };
                var payload = {
                   // viewModel.CitizenEmailAddress(res.EmailAddress);
                   // viewModel.CitizenPhoneNumber(res.PhoneNumber);
                    PhoneNumber: viewModel.CitizenPhoneNumber,
                    EmailAddress: viewModel.CitizenEmailAddress
                }
               // viewModel.displayVerification(true);
                $lib.http.post('/verification-token', payload, (err, res) => {
                    if (err) return $lib.handleError(err);
                   
                })
            }


            function EnableResendButton() {

                var sec = 20;
                var timeLeft = 0;
                var timer = setInterval(function () {
                    --sec;
                    if (sec < 10) timeLeft = "0" + sec; else timeLeft = sec;
                    viewModel.TimeElapse("00:" + timeLeft);
                    viewModel.DisableResentLink("disabled");
                    if (sec == 0) {
                        clearInterval(timer);
                        viewModel.EnableResendLink(true);
                        viewModel.DisableResentLink("");
                        //  $("#divTimer").hide();
                        //   $("#divResendLink").show();

                    }
                }, 1000);
            }

            function getComplaintDetails(accessToken) {

                $lib.http.get(`/complaint/public/${accessToken}`, (err, res) => {

                    $lib.showSpinner(false);
                    if (err) {
                        if (err.responseJSON) {
                            viewModel.HasComplaintMessage(err.responseJSON['description']);
                        }

                        viewModel.IsVerificationRequired(false);
                        return;
                    }
                    sessionStorage.setItem("ComplainentEmail", JSON.stringify(res.CitizenEmailAddress));
                    sessionStorage.setItem("ComplainentPhone", JSON.stringify(res.CitizenPhoneNumber));
                    viewModel.DetailsLoaded(true);


                    /*viewModel.DetailsLoaded(true);
                    viewModel.ComplaintId(res.ComplaintId);
                    viewModel.CitizenName(res.CitizenName);
                    viewModel.CitizenCnic(res.CitizenCnic);
                    viewModel.CitizenEmailAddress(res.CitizenEmailAddress);
                    viewModel.CitizenPhoneNumber(res.CitizenPhoneNumber);
                    viewModel.ComplaintTitle(res.ComplaintTitle);
                    viewModel.ComplaintStatusId(res.ComplaintStatusId);
                    viewModel.ComplaintDescription(res.ComplaintDescription);
                    viewModel.ComplaintCategory(res.ComplaintCategory["CategoryName"])
                    viewModel.CreatedOrModifiedDate(res.ModifiedDate || res.CreatedDate);
                    viewModel.ComplaintCode(res.ComplaintCode);*/
                    setViewModelForComplaint(res);
                    //sessionStorage.setItem("complaintData", JSON.stringify(res));
                    if (res.ComplaintStatusId == COMPLAINT_STATUS_COMPLETE)
                        viewModel.showCommentsSection(true);
                    getComplaintAttachments(res.ComplaintId);
                    getComplaintLogs(res.ComplaintId);
                })
            }


            

            function getComplaintAttachments(complaintId) {

                $lib.http.get(`/attachments/source/${COMPLAINT_SOURCE_TYPE}/id/${complaintId}`, (err, res) => {

                    var _res = res || [];
                    if (err) {
                        if (err.responseText == "NOT_FOUND_COMPLAINT") {

                        }
                        return;
                    }
                    //sessionStorage.setItem("complaintAttachmentData", JSON.stringify(_res));
                    setViewModelForAttachments(_res);

                    //viewModel.complaintAttachments(_res);
                });
            }

            function getComplaintLogs(complaintId) {

                $lib.http.get(`/complaint/${complaintId}/logs`, (err, res) => {

                    var _res = res || [];
                    //sessionStorage.setItem("complaintLogData", JSON.stringify(_res));
                    setViewModelForLogs(_res);
                    //viewModel.ComplaintLogs(res);
                })
            }
            function hasExtension(fileName, exts) {
                return (new RegExp('(' + exts.join('|').replace(/\./g, '\\.') + ')$')).test(fileName);
            }

            // fire when view attachment button is pressed.
            viewModel.viewAttachment = function (file) {
                $util.downloadFile(file.AttachmentId);
            }

            // fire when complaint update button is pressed.
            viewModel.onComplaintUpdate = function () {

                var isUnSatified = "0";
                var successMessage = "";

                var payload = {
                    complaintId: viewModel.ComplaintId(),
                    complaintComments: viewModel.ComplaintComments(),
                    userOpinion: viewModel.SelectedOpinion(),
                    complaintAssignBy: 1018, // public user,
                    complaintAssignTo:  4  // REVIEWER
                }

             
               
                if (payload["userOpinion"] == "2") {
                        if (viewModel.ComplaintLogs().length > 1) {
                            payload["complaintAssignTo"] = viewModel.ComplaintLogs()[(viewModel.ComplaintLogs().length - 2)].ComplaintAssignTo;
                    }

                    isUnSatified = "1"
                  }
                
                

                var formData = new FormData();
                var selectedFiles = viewModel.selectedFiles();
                for (var i = 0; i < selectedFiles.length; i++) {
                    formData.append('Files', selectedFiles[i]);
                }
                for (var p in payload) {                   
                      formData.append(p, payload[p]);
                }


                $lib.showSpinner(true);
                viewModel.ComplaintUpdatedMessage("");

                $lib.http.putForm(`/complaint/${payload.complaintId}`, formData, (err, res) => {

                    $lib.showSpinner(false);
                    if (err) return;
                    console.log("Complaint updated successfully.");
                    viewModel.HasComplaintMessage("Thank you, your complaint has been submitted.")

                    if (isUnSatified == "1") {
                        viewModel.ComplaintClosed(true);
                        viewModel.DetailsLoaded(false);
                        viewModel.HasComplaintMessage("");
                        viewModel.IsSatisfied(false);
                        viewModel.IsUnSatisfied(true);
                        viewModel.IsError(false);
                        viewModel.ErrMessage("");
                        localStorage.setItem("successMessage", "Your complaint has been submitted.");
                    }
                    else if (isUnSatified == "0") {
                        viewModel.ComplaintClosed(true);
                        viewModel.DetailsLoaded(false);
                        viewModel.HasComplaintMessage("");
                        viewModel.IsSatisfied(true);
                        viewModel.IsUnSatisfied(false);
                        viewModel.IsError(false);
                        viewModel.ErrMessage("");
                       // viewModel.ComplaintUpdatedMessage("updated");
                        localStorage.setItem("successMessage", "Your complaint has been closed.");
                    }

                   // localStorage.setItem("successMessage", "Thank you, your complaint has been submitted.");
                    localStorage.setItem("isunSatisfied", isUnSatified);
                    //$util.navigateUrl("Thankyou");
                    //$util.navigateUrl("complaint-form");
                })
            }
            
            viewModel.timeSince = function (date) {
                return $util.timeSince(new Date(date)) + " ago";
            }
            viewModel.onGoBackFromVerification = function () {
                $util.navigateUrl(`complaint-form`);
            }
            //File Upload Work Start
           
            viewModel.onFileSelect = function (elem, event) {

                const target = event.target;
                for (var i = 0; i < target.files.length; i++) {
                    if (!hasExtension(target.files[i].name, [".jpg", ".png", ".pdf"])) {
                        $lib.handleError("Only JPG,PNG and PDF files are allowed.");
                        return;
                    }
                }
                if ((viewModel.selectedFiles().length + target.files.length) > 6) {
                    $lib.handleError("Maximum 6 files are allowed.");
                    return;
                }
                for (var i = 0; i < target.files.length; i++) {
                    var file = target.files[i];
                    viewModel.selectedFiles.push(file);
                }
            }
            viewModel.deleteSelectedFile = function (elemId, event) {

                var index = viewModel.selectedFiles().findIndex(i => i.name == event.name);
                var arr = viewModel.selectedFiles();
                viewModel.selectedFiles().splice(index, 1);
                $("#" + elemId).remove();
            }
            viewModel.viewSelectedFile = function (elemId, file) {

                $util.viewFile(file);
            }

        viewModel.errors = ko.validation.group(viewModel);
        $lib.bindUI(viewModel);
    }())
    </script>
}
