@page "/Downloads"
@{
    ViewData["Title"] = "Downloads";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div id="main" class="">
    <div class="banner-home about-page">
        <div class="banner about-banner">
            <div class="container">
                <div class="banner-detail">
                    <h1 class="heading">
                        Downloads
                    </h1>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="new-page downloads-page mt30">
            <div class="row">
                <div class="col-12">
                    <p class="total-recoed">
                        Total Record(s): <span data-bind="text: totalRecordsCount"></span>
                    </p>
              
                    <!--ko foreach: downloadsList-->
                    <div class="download-items">
                        <h6 data-bind="text: Download.DownloadTitle"></h6>
                        <p data-bind="html: Download.DownloadDescription"></p>
                        <ul data-bind="foreach: Attachments">
                            <li>
                                <img src="~/images/download-icon.svg" alt="download">
                                <a href="javascript:void(0)" data-bind="click: $root.onFileDownload">
                                    <span data-bind="text: OriginalFileName"></span>
                                </a>
                            </li>
                        </ul>
                    </div>
                    <!--/ko-->
                </div>
                <div class="col-12">
                    <div class="pagination-holder"  data-bind="visible: downloadsList().length > 0">
                        <div class="row ">
                            <ul class="pagination col-sm-6">
                                <li class="page-item" data-bind="class: getPreviousButtonClass">
                                    <a class="page-link left" href="#" data-bind="click: onPrevious"><span class="fa fa-caret-left"></span></a>
                                </li>
                                <li>
                                    <input class="page-link form-control" data-bind="integerInput,
                                           propertyName: 'totalPagesCount',
                                           value: currentPageNo,
                                           event: { change: onPageChange }">
                                </li>
                                <li><p>of <span data-bind="text: totalPagesCount"></span></p></li>
                                <li class="page-item" data-bind="class: getNextButtonClass">
                                    <a class="page-link right" href="#" data-bind="click: onNext"><span class="fa fa-caret-right"></span></a>
                                </li>
                            </ul>
                            <div class="records-field col-sm-6 text-right">
                                <label>
                                    Records per page
                                </label>
                                <div class="custom-dropdown cus-sel">
                                    <select class="form-control" data-bind="options: recordsPerPageList,
                                                                                optionsText: 'Text',
                                                                                optionsValue: 'Value',
                                                                                value: selectedPageSize"></select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {

    <script type="text/javascript">

        $(document).ready(function () {

            $lib.bindUI(viewModel);
            $lib.setPageTitle("Downloads");
            viewModel.currentPageNo(1);

            fillRecordsPerPage();
            pageSize_Change();
            getDownloadsList();
        });

        var viewModel = {

            downloadsList: ko.observableArray(null),
            totalPagesCount: ko.observable(0),
            currentPageNo: ko.observable(0),
            orderBy: ko.observable("CreatedDate"),
            isAscendingOrder: ko.observable(false),
            totalRecordsCount: ko.observable(0),
            recordsPerPageList: ko.observableArray(null),
            selectedStatus: ko.observable(null),
            selectedPageSize: ko.observable(10),
            getPreviousButtonClass: ko.pureComputed(function () {

                var currentPageNumber = parseInt(this.viewModel.currentPageNo());
                return (currentPageNumber <= 1) ? '' : 'active';
            }),
            getNextButtonClass: ko.pureComputed(function () {

                var currentPageNumber = parseInt(this.viewModel.currentPageNo());
                var totalPagesCount = parseInt(this.viewModel.totalPagesCount());
                return (currentPageNumber < totalPagesCount) ? 'active' : '';
            }),
            onPrevious: onPrevious,
            onNext: onNext,
            onPageChange: getDownloadsList,
            onFileDownload: downloadFile
        }

        var selectListModel = function (value, text) {
            this.Text = text;
            this.Value = value;
        }

        function downloadFile(attachment) {

            $util.downloadFile(attachment.AttachmentId);
        }

        function fillRecordsPerPage() {

            viewModel.recordsPerPageList([
                new selectListModel(10, "10"),
                new selectListModel(20, "20")
            ]);
        }

        function pageSize_Change() {

            viewModel.selectedPageSize.subscribe(function () {
                viewModel.currentPageNo(1);
                getDownloadsList();
            });
        }

        function getDownloadsList() {

            if (!isNaN(parseInt(viewModel.currentPageNo())) && parseInt(viewModel.currentPageNo()) > 0) {

                var queryParams = {
                    PageIndex: parseInt(viewModel.currentPageNo()) - 1,
                    PageSize: viewModel.selectedPageSize()
                };

                $lib.showSpinner(true);
                $lib.http.get("/download/public?PageNumber=" + queryParams.PageIndex + "&PageSize=" + queryParams.PageSize, fillDownloadsList);
            }
            else {
                $toastMessages.showError("Invalid Page Number");
            }
        }

        function fillDownloadsList(err, res) {

            $lib.showSpinner(false);
            if (err) {
                return;
            }
            else {

                viewModel.downloadsList(res.Records);
                viewModel.totalPagesCount(res.TotalPages);
                viewModel.totalRecordsCount(res.TotalRecords);
            }
        }

        function onPrevious() {

            var currentPageNo = parseInt(viewModel.currentPageNo());
            if (currentPageNo > 1) {
                viewModel.currentPageNo(--currentPageNo);
                getDownloadsList();
            }
        }

        function onNext() {

            var currentPageNo = parseInt(viewModel.currentPageNo());
            var totalPageCount = parseInt(viewModel.totalPagesCount());
            if (currentPageNo < totalPageCount) {
                viewModel.currentPageNo(++currentPageNo);
                getDownloadsList();
            }
        }

    </script>
}

